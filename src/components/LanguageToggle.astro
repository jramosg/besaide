---
import { getLangFromUrl, switchLanguage, getUrlFromID } from 'i18n/utils';
import type { Langs } from '@/i18n/ui';

const languages = [
	{ code: 'eu', name: 'Euskera', nativeName: 'Eu' },
	{ code: 'es', name: 'EspaÃ±ol', nativeName: 'Es' }
] as const;

const url = Astro.url;
const { singleNewsId, singleEventId } = Astro.params;
const lang = getLangFromUrl(url);

function langHref(targetLang: Langs) {
	if (!singleNewsId && !singleEventId) {
		return switchLanguage(url);
	}

	const sectionId = singleNewsId ? 'news' : 'agenda';
	const id = singleNewsId || singleEventId || '';
	const section = getUrlFromID(sectionId, targetLang);
	const newSingleNewsId =
		targetLang === 'es' ? `${id}-es` : id.replace(/-es$/, '');
	return `${section}/${newSingleNewsId}`;
}

const switchLang = languages.filter(l => l.code !== lang)[0];
const switchHref = langHref(switchLang.code);
---

{
	switchHref && (
		<div class="language-toggle">
			{languages.map(language => (
				<a href={langHref(language.code)} class="lang-toggle-link">
					<button
						type="button"
						class={`lang-option-btn lang-option${language.code === lang ? ' selected' : ''}`}
						role="option"
						aria-selected={language.code === lang}
						data-lang={language.code}
					>
						{language.nativeName}
					</button>
				</a>
			))}
		</div>
	)
}

<style>
	.language-toggle {
		display: flex;
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-semibold);
	}
	.lang-toggle-link {
		text-decoration: none;
		display: flex;
		align-items: center;

		&:first-child::after {
			content: '';
			display: block;
			width: 2px;
			height: var(--s3);
			background-color: var(--theme-primary);
		}

		&:hover {
			.lang-option {
				color: var(--theme-primary-900);
			}
		}
	}

	.lang-option {
		width: 100%;
		padding: var(--s2) 0;
		background: none;
		border: none;
		cursor: pointer;
		color: var(--theme-primary);
		transition: color 0.3s ease-in-out;
	}
	.lang-option:hover,
	.lang-option.selected {
		text-decoration: underline;
	}
</style>
