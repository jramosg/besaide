---
import { formatDate, getLangFromUrl, getUrlFromID } from '@/i18n/utils';
import { sortedAndFilteredNewsPosts } from '@/staticPathsHelper';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';
import UdalaitzImg from '@/assets/udalaitz.webp';
import { slugify } from '@/utils/string';
import Button from './buttons/Button.astro';

const lang = getLangFromUrl(Astro.url);
let news: CollectionEntry<'news'>[] = await sortedAndFilteredNewsPosts(lang);
news = news.slice(0, 5); // Limit to 5 news items for the component

const newsSection = getUrlFromID('news', lang);

const images = import.meta.glob<{ default: ImageMetadata }>(
	'/src/assets/*.{jpeg,jpg,png,gif,webp}'
);

const processedNews = await Promise.all(
	news.map(async item => {
		let processedImage: ImageMetadata | string = UdalaitzImg; // default fallback

		if (item.data.image) {
			if (item.data.image.startsWith('@/assets/')) {
				// Handle local asset imports using import.meta.glob
				const imagePath = item.data.image.replace('@/', 'src/');
				const fullPath = `/${imagePath}`;
				try {
					if (images[fullPath]) {
						processedImage = (await images[fullPath]()).default;
					} else {
						console.error(
							`Image not found: ${fullPath}. Available images:`,
							Object.keys(images)
						);
						console.error(
							`Falling back to default image for item ID: ${item.id}`
						);
					}
				} catch (error) {
					console.warn(`Could not import image: ${item.data.image}`, error);
				}
			} else if (item.data.image.startsWith('http')) {
				// Handle external URLs
				//	processedImage = item.data.image;
			}
		}

		return {
			...item,
			processedImage,
			slug: `${newsSection}/${slugify(item.id)}`
		};
	})
);
---

<section class="content__container" id="berriak">
	<div class="section-header">
		<h2>Berriak</h2>
		<p>Azken albisteak eta eguneraketak</p>
	</div>

	<div class="featured-news">
		{
			processedNews.map(item => (
				<a href={item.slug} class="card card--elevated news-card">
					<div
						class="news-image"
						style={`view-transition-name: image-${slugify(item.id)}`}
					>
						{typeof item.processedImage === 'string' ? (
							<img
								src={item.processedImage}
								alt={item.data.imageAlt || item.data.title}
								style="width: 100%; height: 100%; object-fit: cover;"
							/>
						) : (
							<Image
								src={item.processedImage}
								alt={item.data.imageAlt || item.data.title}
								style="width: 100%; height: 100%; object-fit: cover;"
							/>
						)}
					</div>
					<div class="news-content">
						<div class="news-meta">
							<span class="news-date">{formatDate(item.data.date)}</span>
						</div>
						<h3 style={`view-transition-name: title-${slugify(item.id)}`}>
							{item.data.title}
						</h3>
						<p>{item.data.summary}</p>
						<div class="news-actions">
							<span class="read-more">+ info</span>
							<button class="share-btn">Partekatu lagunekin</button>
						</div>
					</div>
				</a>
			))
		}
	</div>
	<div class="news-footer">
		<Button outlined href={getUrlFromID('news', lang)}
			>Berri guztiak ikusi</Button
		>
	</div>
</section>

<style>
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
	}

	.section-header {
		margin-bottom: 4rem;
	}

	.section-header h2 {
		font-size: 2.5rem;
		font-weight: 700;
		margin-bottom: 1rem;
	}

	.section-header p {
		font-size: 1.1rem;
		color: var(--theme-text-secondary);
		max-width: 600px;
	}

	/* Featured News */
	.featured-news {
		display: grid;
		grid-template-columns: 1fr 1fr 1fr;
		margin-bottom: 3rem;
		justify-content: center;
		gap: 2rem;
	}

	.news-card {
		border-left: 4px solid var(--theme-primary);
		text-decoration: none;
	}

	.news-image {
		height: 150px;

		display: flex;
		align-items: center;
		justify-content: center;
		position: relative;
		img {
			border-top-right-radius: var(--theme-shape-radius);
			border-top-left-radius: var(--theme-shape-radius);
		}
	}

	.news-emoji {
		font-size: 3rem;
		filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
	}

	.news-content {
		padding: 2rem;
	}

	.news-meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
	}

	.news-category {
		background: var(--theme-primary);
		color: var(--theme-on-primary);
		padding: 0.25rem 0.75rem;
		border-radius: var(--theme-button-border-radius);
		font-size: 0.8rem;
		font-weight: 600;
	}

	.news-date {
		color: var(--theme-text-secondary);
		font-size: 0.9rem;
	}

	.news-content h3 {
		font-size: 1.4rem;
		font-weight: 600;
		color: var(--theme-on-bg);
		margin-bottom: 1rem;
		line-height: 1.3;
	}

	.news-content p {
		color: var(--theme-text-secondary);
		line-height: 1.6;
		margin-bottom: 1.5rem;
	}

	.news-actions {
		display: flex;
		justify-content: space-between;
		align-items: center;
		flex-wrap: wrap;
		gap: 1rem;
	}

	.read-more {
		color: var(--theme-primary);
		text-decoration: none;
		font-weight: 600;
		font-size: 0.9rem;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		transition: var(--theme-transition);
	}

	.read-more:hover {
		color: var(--theme-primary-dark);
	}

	.share-btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: var(--s4) var(--s6);
		color: var(--theme-text-secondary);
		text-decoration: none;
		font-size: var(--font-size-sm);
		font-weight: 600;
		transition: transform 0.3s ease;
		border: unset;
		cursor: pointer;
		background: transparent;
	}

	.share-btn:hover {
		transform: translateY(-2px);
	}

	/* Regular News */
	.regular-news h3 {
		font-size: 1.4rem;
		font-weight: 600;
		color: #1f2937;
		margin-bottom: 1.5rem;
		padding-bottom: 0.5rem;
		border-bottom: 2px solid #e5e7eb;
	}

	.read-more-simple {
		color: #2d5a3d;
		text-decoration: none;
		font-size: 0.85rem;
		font-weight: 600;
		transition: color 0.3s ease;
	}

	.read-more-simple:hover {
		color: #1a472a;
	}

	.news-footer {
		text-align: center;
	}

	.btn {
		display: inline-block;
		padding: 0.875rem 2rem;
		border-radius: 6px;
		text-decoration: none;
		font-weight: 600;
		transition: all 0.3s ease;
		font-size: 0.95rem;
	}

	.btn-outline {
		color: var(--theme-primary);
		border: 2px solid var(--theme-primary);
		background: transparent;
	}

	.btn-outline:hover {
		background: var(--theme-primary);
		color: var(--theme-on-primary);
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
	}

	@media (max-width: 1200px) {
		.featured-news {
			grid-template-columns: 1fr 1fr;
		}
	}
	/* Mobile Styles */
	@media (max-width: 768px) {
		.featured-news {
			grid-template-columns: 1fr;
		}

		.news-actions {
			flex-direction: column;
			align-items: flex-start;
		}

		.share-buttons {
			align-self: flex-start;
		}

		.news-item {
			flex-direction: column;
		}

		.news-item-image {
			align-self: flex-start;
		}

		.section-header h2 {
			font-size: 2rem;
		}
	}

	@media (max-width: 480px) {
		.news-content {
			padding: 1.5rem;
		}

		.section-header h2 {
			font-size: 1.75rem;
		}
	}
</style>

<script>
	import { toast } from '@/utils/toast';

	document.addEventListener('astro:page-load', () => {
		const shareButtons = Array.from(document.querySelectorAll('.share-btn'));
		shareButtons.forEach(btn => {
			btn.addEventListener('click', async event => {
				event.preventDefault();
				event.stopPropagation();
				// Find the closest card anchor to get the URL and title
				const anchor = btn.closest('a');
				const url = anchor ? anchor.href : window.location.href;
				const titleEl = anchor ? anchor.querySelector('h3') : null;
				const title = titleEl ? titleEl.textContent.trim() : document.title;
				const subText = anchor
					? anchor.querySelector('p')?.textContent.trim() || ''
					: '';
				const text = title + (subText.length > 0 ? ' - ' + subText : '');

				const shareData = { title, text, url };

				const copyToClipboard = async () => {
					console.log('Copying to clipboard:', url);
					/* if (!navigator.clipboard) {
						toast.error('Ezin da kopiatu, ez dago clipboard API-rik');
						return;
					} */
					const clipboardItem = new ClipboardItem({ ['text/plain']: url });
					await navigator.clipboard.write([clipboardItem]);
					toast.success('Linka kopiatu da!');
				};

				if (!navigator.canShare) {
					await copyToClipboard();
					return;
				}
				if (!navigator.canShare(shareData)) {
					await copyToClipboard();

					return;
				}
				navigator
					.share(shareData)
					.then(() => console.log('Successful share'))
					.catch(e => console.error('Error: ' + e));
			});
		});
	});
</script>
